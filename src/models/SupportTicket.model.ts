import mongoose, { Document, Schema } from 'mongoose';

export interface ISupportTicket extends Document {
  ticketNumber: string;
  user?: mongoose.Types.ObjectId;
  order?: mongoose.Types.ObjectId;
  purchaseId?: string; // For unregistered users to reference their purchase
  guestEmail?: string;
  guestName?: string;
  subject: string;
  message: string;
  category: 'payment' | 'delivery' | 'product' | 'technical' | 'other';
  ticketType: 'purchase_issue' | 'general_inquiry'; // New field to distinguish ticket types
  status: 'open' | 'in-progress' | 'resolved' | 'closed';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  responses: Array<{
    message: string;
    isAdminResponse: boolean;
    createdAt: Date;
  }>;
  resolvedAt?: Date;
  createdAt: Date;
  updatedAt: Date;
}

const responseSchema = new Schema({
  message: {
    type: String,
    required: true
  },
  isAdminResponse: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

const supportTicketSchema = new Schema<ISupportTicket>(
  {
    ticketNumber: {
      type: String
      // Not required since it's auto-generated by pre-save hook
    },
    user: {
      type: Schema.Types.ObjectId,
      ref: 'User'
    },
    order: {
      type: Schema.Types.ObjectId,
      ref: 'Order'
    },
    purchaseId: {
      type: String,
      trim: true
    },
    guestEmail: {
      type: String,
      lowercase: true,
      trim: true
    },
    guestName: {
      type: String,
      trim: true
    },
    subject: {
      type: String,
      required: true,
      trim: true,
      maxlength: 200
    },
    message: {
      type: String,
      required: true,
      maxlength: 2000
    },
    category: {
      type: String,
      enum: ['payment', 'delivery', 'product', 'technical', 'other'],
      default: 'other'
    },
    ticketType: {
      type: String,
      enum: ['purchase_issue', 'general_inquiry'],
      required: true
    },
    status: {
      type: String,
      enum: ['open', 'in-progress', 'resolved', 'closed'],
      default: 'open'
    },
    priority: {
      type: String,
      enum: ['low', 'medium', 'high', 'urgent'],
      default: 'medium'
    },
    responses: [responseSchema],
    resolvedAt: Date
  },
  {
    timestamps: true
  }
);

// Generate ticket number - runs before validation
supportTicketSchema.pre('validate', function(next) {
  if (!this.ticketNumber) {
    const timestamp = Date.now().toString(36).toUpperCase();
    const random = Math.random().toString(36).substring(2, 5).toUpperCase();
    this.ticketNumber = `TKT-${timestamp}-${random}`;
  }
  next();
});

// Update resolvedAt when status changes to resolved
supportTicketSchema.pre('save', function(next) {
  if (this.isModified('status') && this.status === 'resolved' && !this.resolvedAt) {
    this.resolvedAt = new Date();
  }
  next();
});

// Indexes
supportTicketSchema.index({ ticketNumber: 1 }, { unique: true });
supportTicketSchema.index({ user: 1 });
supportTicketSchema.index({ guestEmail: 1 });
supportTicketSchema.index({ purchaseId: 1 });
supportTicketSchema.index({ status: 1 });
supportTicketSchema.index({ priority: 1 });
supportTicketSchema.index({ ticketType: 1 });
supportTicketSchema.index({ createdAt: -1 });

export const SupportTicket = mongoose.model<ISupportTicket>('SupportTicket', supportTicketSchema);
